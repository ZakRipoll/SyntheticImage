void buildSceneSphere(Camera* &cam, Film* &film,
                      std::vector<Shape*>* &objectsList,
                      std::vector<PointLightSource>* &lightSourceList)
{
    /* **************************** */
    /* Declare and place the camera */
    /* **************************** */
    // By default, this gives an ID transform
    //  which means that the camera is located at (0, 0, 0)
    //  and looking at the "+z" direction
    Matrix4x4 cameraToWorld;
    double fovDegrees = 60;
    double fovRadians = Utils::degreesToRadians(fovDegrees);
    cam = new PerspectiveCamera(cameraToWorld, fovRadians, *film);

    /* ************************** */
    /* DEFINE YOUR MATERIALS HERE */
    /* ************************** */
    //  EXAMPLE:  Material *green_50 = new Phong (Vector3D(0.2, 0.7, 0.3), Vector3D(0.2, 0.6, 0.2), 50);
	Material *green_50 = new Phong(Vector3D(0.2, 0.7, 0.3), Vector3D(0.2, 0.6, 0.2), 50);
	Material *blue_40 = new Phong(Vector3D(0.1, 0.2, 0.7), Vector3D(0.2, 0.3, 0.7), 40);
	Material *red_10 = new Phong(Vector3D(0.8, 0.2, 0.3), Vector3D(0.7, 0.1, 0.1), 10);

    /* ******* */
    /* Objects */
    /* ******* */
    // Create a heterogeneous list of objects of type shape
    // (some might be triangles, other spheres, plans, etc)
    objectsList = new std::vector<Shape*>;

    // Define and place a sphere
    Matrix4x4 sphereTransform1;
	sphereTransform1 = sphereTransform1.translate(Vector3D(1,0,7));
    Shape *s1 = new Sphere (2, sphereTransform1, green_50);
	
	
    // Define and place a sphere
    Matrix4x4 sphereTransform2;
    sphereTransform2 = sphereTransform2.translate(Vector3D(-2, -0, 5));
    Shape *s2 = new Sphere (1.5, sphereTransform2, blue_40);
	
    // Define and place a sphere
    Matrix4x4 sphereTransform3;
    sphereTransform3 = sphereTransform3.translate(Vector3D(0.3, -0.75, 4));
	Shape *s3 = new Sphere(1, sphereTransform3, red_10);
	

    // Store the objects in the object list
    objectsList->push_back(s1);
    objectsList->push_back(s2);
   objectsList->push_back(s3);

    /* ****** */
    /* Lights */
    /* ****** */
 
	//PointLightSource light1 = *new PointLightSource(Vector3D(100.0f, 25.0f, 5.0f), Vector3D(0.5f, 1.0f, 0.3f));
	//PointLightSource light2 = *new PointLightSource(Vector3D(10.0f, 1.0f, 2.0f), Vector3D(0.1f, 0.2f, 1.0f));

	PointLightSource light1(Vector3D(2, 2, 2), Vector3D(10.0f, 10.0f, 10.0f));
	PointLightSource light2(Vector3D(0.0f, 2.0f, -1.0f), Vector3D(10.0f, 10.0f, 10.0f));
	PointLightSource light3(Vector3D(0.0f, -2.0f, 0.f), Vector3D(1.0f, 1.0f, 1.0f));


    // DO NOT FORGET TO STORE THE LIGHT SOURCES IN THE "lightSourceList"
  
	lightSourceList = new std::vector<PointLightSource>;

	lightSourceList->push_back(light1);
	lightSourceList->push_back(light2);
	lightSourceList->push_back(light3);
}